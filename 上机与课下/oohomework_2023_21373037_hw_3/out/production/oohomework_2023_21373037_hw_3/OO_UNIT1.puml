@startuml
'https://plantuml.com/class-diagram
interface Factor {
Poly toPoly()
}
class CustomFun {
String name
Factor factor1
Factor factor2
Factor factor3
Poly toPoly()
}
class CustomFunSet {
String name;
String var1;
String var2;
String var3;
String fun;
}
class Derivation {
Expr expr
Poly toPoly()
}
class DerivationMethod {
String var
Poly derivation(Poly poly)
Poly derivationPoly(Unit unit)
derivationTri(Unit unit, HashMap.Entry<Poly, Integer> entry)
}
class Expr {
ArrayList<Term> terms
int index
Poly toPoly()
}
class Term {
ArrayList<Factor> factors
int pos
Poly toPoly()
}
class Lexer {
String input
int pos
String curToken
String getNumber()
String next()
}
class Parser {
Lexer lexer
Expr parseExpr()
Term parseTerm(int pos)
Factor parseFactor()
Derivation parseDerivation()
CustomFun parseCustomFun()
Unit parseUnit()
TriFun parseTriFun()
Expr parseExprFactor()
}
class TriFun {
int index
boolean isSin
Factor factor
Poly toPoly()
}
class Unit {
BigInteger constant;
int indexX
int indexY
int indexZ
int pos
HashMap<Poly, Integer> triFunHashMap
boolean notExpr()
Poly toPoly()
Unit clone()
}
class Poly {
ArrayList<Unit> units
boolean equals(Poly poly)
void inverse()
boolean inverseEqual(Poly poly)
int isHashMapSame(HashMap<Poly, Integer> map1, HashMap<Poly, Integer> map2)
void squareMergeModify(Unit unit1, Unit unit2)
Poly addPoly(Poly other)
Poly mulPoly(Poly other)
Poly powPoly(int index)
String toString()
}
class MainClass {
{static} String preExpr(String input)
{static} String parseExpr(String input)
{static} CustomFunSet preCustomFunSet(String function1)
{static} void main()
}
MainClass -- Poly
Factor <|.. Expr
Factor <|.. CustomFun
CustomFun -- CustomFunSet
Factor <|.. TriFun
Factor <|.. Derivation
Factor <|.. Unit
DerivationMethod <|-- Derivation
Parser o-- Lexer
Expr o-- Term
Term o-- Factor
Poly o-- Unit
@enduml