**teacher:袁源**
**group:3** 
**member: 21231120	谢辉**
        **21371119	雷欣雨**
        **21371161	叶怀谦**
        **21373322	王桐雨**
        **21373215	王继来**
        **21373453	范昌源**
        **21373037	杨博文**

##结合第一二次作业关于多线程程序设计的讨论

经过讨论，我们从<多线程程序设计>这一大主题出发，细化到以下三个主题

###作业的整体架构的设计

经过初步讨论，大家一致认为本次作业应基于生产者-消费者模式进行架构。首先针对是否应当开分配者线程以及分配策略开展了讨论。

谢辉同学选择开一个输入+6台电梯+分配者八条线程，每台电梯设置Input和Output两个队列，分配者线程会轮询当前的托盘情况，若得到一请求，则将其使用随机数模六的方法分配给某台电梯。

叶怀谦同学表示受到上一次实验代码的启发，同样采用了八条线程，然而在分配逻辑上进行了调整，根据请求来临时每台电梯的状态去分配请求。

范昌源同学提出了不足之处，缺乏可扩展性，由于第二次作业动态增长电梯，编号也不同，所以模6的算法需要修改。同时他使用了HashMap存储每一楼层的请求，十分高效。

雷欣雨同学针对第二次作业提出为每一台电梯增加maintain标志位，并不直接让电梯停下，而是让其尽可能的再上两层，能下几个人是几个人，这样节省了时间，消耗了电力。

杨博文，范昌源，王继来同学构建了调度器，一致认为电梯不该有思想，只会听调度器的指示办事，而调度器也不需作为线程而存在。

杨博文同学认为每台电梯每轮会得到一个指示，并根据指示执行，而王继来同学将电梯看作了**状态机**，他认为应当保留状态，并一同进行下一次状态的判断，并向我们介绍了状态模式，令人受益匪浅。

###调度策略

大家的调度策略共分为几种，自由竞争(不再多说)，分配请求后单台电梯的ASL或LOOK，和宏观调度。

杨博文同学首先介绍了他的调度机制，他没有分配请求，而当一台空电梯判断是不是要去接人时，进行了复杂的逻辑判断，总的来说是将**其他所有电梯的状态**与**当前电梯状态**与**当前请求**进行综合的逻辑判断。

王继来同学则是设置了一套权重算法，用反比例函数的形式衡量每台电梯的权重，具有创造性。

叶怀谦同学道出此种调度尽管很省电，但可能会有超时的风险，最后得分很可能不如自由竞争算法。

大家笑了笑，最后一致认为该作业并无完美方案，性能注定顾此失彼，只能尽量的权衡。

###多线程问题

由于大家初次接触多线程程序设计，注定状况百出。

王桐雨同学提出多线程编程时遇到的容器删除时线程并发问题，给出了两种解决方案，第一种是上锁后使用迭代器删除遍历，并向大家介绍了BlockQueue，一种自带锁的请求队列。

王继来同学补充了Copy on write+容器的思路，也可以实现对共享对象的保护，还提出了使用LockSupport代替Synchronized进行加锁。

杨博文同学提出针对某些情况线程无法被正常唤醒时，可以采用wait(一段时间)的做法，时间到时自动唤醒，并表示此种做法也并不会让CPU超时。

###总结
本次会议，学术氛围浓厚，成员们讨论的风生水起，各抒己见，竭力分享，一度有无法暂停之势，相信大家可以取长补短，在这次研讨课中获得全新的收获!