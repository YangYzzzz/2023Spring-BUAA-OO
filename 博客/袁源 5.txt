**teacher:袁源**
**group:5** 
**member: 21373191	杜金阳**
        **21371243	刘校君**
        **21371283	任宇翔**
        **21373322	王桐雨**
        **20375038	吴思睿**
        **20231005	阳婧月**
        **21373037	杨博文**

##第一二次作业的层次化处理与实现细节

经过讨论，我们从<第一二次作业的层次化处理与实现细节>这一大主题出发，细化到以下两个主题

###结构的层次化处理
本题解法大家一致认为思路应当是分四步走：**预处理\==>递归下降形成表达式\==>将表达式转化为多项式\==>多项式化简（合并同类项）\==>利用重写toString()来完成多项式的输出，并优化性能分。**

该问题主要聚焦于表达式树的建立上，大家一致同意本题应当使用递归下降法，构建Expr，Term，Factor类，但在继续细分Factor时出现了分歧。

刘校君同学认为常数因子和幂函数因子可以相结合，再在Term类里定义多项式相乘方法。

杨博文同学同意其观点，并提出基元的概念，将多项式看作是单项式的集合，解析时将Pow和Num统一看作单项式，并对每个类提供toPoly方法。

杜金阳同学提出只在Poly类和Mono类中提供toString方法即可，在扩展性上可继续将三角函数类和自定义函数类实现接口Factor，使其“归一化”。

大家一致认可这种宏观上的层次化设计，达成了共识。

###细节的优化
大家为了更方便处理或卷性能分势必会对代码作出优化。

王桐雨同学将Term的符号归到其第一个因子，因此可不需要Term的符号属性，具有借鉴意义。

任宇翔同学重点介绍了符号的预处理，将多个正负号可提前合并，并去除前导零。

吴思睿同学将+-预处理为1*和-1*，对于自定义函数的处理时，在解析的过程中便将自定义函数实参换形参，并进行字符串替换。

杨博文同学提出了反对意见，他选择在解析过程中保留自定义函数，使其作为表达式树的一部分，在toPoly中再对其进行解析，同时提出实参转形参时用replaceAll会遇到的矛盾现象。

杜金阳同学表示认可杨博文同学，并简短分析了利弊，并提出可将正号表达式提前，卷一点性能分。

###对于第二次作业合并同类项的疑问
对于增加的三角函数，大家一致同意应在单项类里面另开ArrayList/HashMap来存储sin&cos。

阳婧月同学首先分享了自己的架构，并提出若增加三角函数该如何合并同类项的问题，大家展开了激烈讨论。

部分同学认为可从对于Poly类的进行某种规则的排序(字典序)入手(将表达式树排序)，而杨博文同学提出了一种“消消乐”的方法，通过遍历poly内各个元素并递归相消的模式比较两个Poly是否相同，为大家提供了全新的思路，并特别强调要使用迭代器和深克隆。

###总结
本次会议讨论激烈，氛围极佳，相信每位同学都收获了新鲜的知识，并对接下来的设计思路有所启发。